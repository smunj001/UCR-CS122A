
Lab3_Part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000268  000002fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000268  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800104  00800104  00000300  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000330  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a9c  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b6  00000000  00000000  00000e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000427  00000000  00000000  00001732  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c4  00000000  00000000  00001b5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004db  00000000  00000000  00001c20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000088  00000000  00000000  000020fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002183  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e6       	ldi	r30, 0x68	; 104
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	af 30       	cpi	r26, 0x0F	; 15
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	a8 d0       	rcall	.+336    	; 0x214 <main>
  c4:	cf c0       	rjmp	.+414    	; 0x264 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerOn>:
	// Interrupt Enable”
	// SPDR contains the received data, e.g. unsigned char receivedData =
	// SPDR;
	
	receivedData = SPDR;
}
  c8:	8b e0       	ldi	r24, 0x0B	; 11
  ca:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  ce:	8d e7       	ldi	r24, 0x7D	; 125
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  d6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
  e0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  e4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  ec:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  f0:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
  f4:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
  f8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
  fc:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 100:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 104:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
 108:	80 e8       	ldi	r24, 0x80	; 128
 10a:	8f bf       	out	0x3f, r24	; 63
 10c:	08 95       	ret

0000010e <SPI_ServantInit>:
 10e:	80 e4       	ldi	r24, 0x40	; 64
 110:	84 b9       	out	0x04, r24	; 4
 112:	8c b5       	in	r24, 0x2c	; 44
 114:	80 6c       	ori	r24, 0xC0	; 192
 116:	8c bd       	out	0x2c, r24	; 44
 118:	08 95       	ret

0000011a <SMP1>:

void SMP1()
{
	
	//Transitions
	switch(sm1_state)
 11a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <sm1_state>
 11e:	83 30       	cpi	r24, 0x03	; 3
 120:	20 f4       	brcc	.+8      	; 0x12a <SMP1+0x10>
			
		case s0:
			sm1_state = s1;
		
		case s1:
			sm1_state = s0;
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <sm1_state>
 128:	05 c0       	rjmp	.+10     	; 0x134 <SMP1+0x1a>
		default:
			break;
	}
	
	//Actions
	switch(sm1_state)
 12a:	81 30       	cpi	r24, 0x01	; 1
 12c:	19 f0       	breq	.+6      	; 0x134 <SMP1+0x1a>
 12e:	82 30       	cpi	r24, 0x02	; 2
 130:	21 f0       	breq	.+8      	; 0x13a <SMP1+0x20>
 132:	08 95       	ret
	{
		case wait:
			break;
		
		case s0:
			PORTA = 0xF0;
 134:	80 ef       	ldi	r24, 0xF0	; 240
 136:	82 b9       	out	0x02, r24	; 2
			break;
 138:	08 95       	ret
		
		case s1:
			PORTA = 0x0F;
 13a:	8f e0       	ldi	r24, 0x0F	; 15
 13c:	82 b9       	out	0x02, r24	; 2
 13e:	08 95       	ret

00000140 <SMP2>:
}

void SMP2()
{
	//Transitions
	switch(sm2_state)
 140:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <sm2_state>
 144:	83 30       	cpi	r24, 0x03	; 3
 146:	20 f4       	brcc	.+8      	; 0x150 <SMP2+0x10>
		
		case sm2_s0:
			sm2_state = sm2_s1;
		
		case sm2_s1:
			sm2_state = sm2_s0;
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <sm2_state>
 14e:	05 c0       	rjmp	.+10     	; 0x15a <SMP2+0x1a>
		default:
			break;
	}
	
	//Actions
	switch(sm2_state)
 150:	81 30       	cpi	r24, 0x01	; 1
 152:	19 f0       	breq	.+6      	; 0x15a <SMP2+0x1a>
 154:	82 30       	cpi	r24, 0x02	; 2
 156:	19 f0       	breq	.+6      	; 0x15e <SMP2+0x1e>
 158:	08 95       	ret
	{
		case sm2_wait:
			break;
					
		case sm2_s0:
			PORTA = 0XAA;		
 15a:	8a ea       	ldi	r24, 0xAA	; 170
 15c:	82 b9       	out	0x02, r24	; 2
			
		case sm2_s1:
			PORTA = 0x55;	
 15e:	85 e5       	ldi	r24, 0x55	; 85
 160:	82 b9       	out	0x02, r24	; 2
 162:	08 95       	ret

00000164 <getPattern>:

*/

void getPattern()
{
	pattern = (receivedData & 0xF0); //4 Possible Patterns
 164:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <receivedData>
 168:	98 2f       	mov	r25, r24
 16a:	90 7f       	andi	r25, 0xF0	; 240
 16c:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <pattern>
	speed = (receivedData & 0x0F);  //6 Possible Speeds
 170:	8f 70       	andi	r24, 0x0F	; 15
 172:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <speed>
	
	//Check the pattern chosen
	if(pattern == 0x10)  //A
 176:	90 31       	cpi	r25, 0x10	; 16
 178:	21 f4       	brne	.+8      	; 0x182 <getPattern+0x1e>
	{
		pattern = 0xF0;
 17a:	90 ef       	ldi	r25, 0xF0	; 240
 17c:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <pattern>
 180:	0c c0       	rjmp	.+24     	; 0x19a <getPattern+0x36>
	}
	
	if(pattern == 0x20)  //B
 182:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <pattern>
 186:	90 32       	cpi	r25, 0x20	; 32
 188:	21 f4       	brne	.+8      	; 0x192 <getPattern+0x2e>
	{
		pattern = 0xAA;
 18a:	9a ea       	ldi	r25, 0xAA	; 170
 18c:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <pattern>
 190:	0b c0       	rjmp	.+22     	; 0x1a8 <getPattern+0x44>
	}
	
	if(pattern == 0x40)  //C
 192:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <pattern>
 196:	90 34       	cpi	r25, 0x40	; 64
 198:	21 f0       	breq	.+8      	; 0x1a2 <getPattern+0x3e>
	{
		pattern = 0x80;
	}
	
	if(pattern == 0x80)  //D
 19a:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <pattern>
 19e:	90 38       	cpi	r25, 0x80	; 128
 1a0:	19 f4       	brne	.+6      	; 0x1a8 <getPattern+0x44>
	{
		pattern = 0x55;
 1a2:	95 e5       	ldi	r25, 0x55	; 85
 1a4:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <pattern>
	}
	
	
	//Check Speed Chosen
	
	if(speed == 0x01)  //1
 1a8:	81 30       	cpi	r24, 0x01	; 1
 1aa:	39 f4       	brne	.+14     	; 0x1ba <getPattern+0x56>
	{
		speed_set = 2000;
 1ac:	20 ed       	ldi	r18, 0xD0	; 208
 1ae:	37 e0       	ldi	r19, 0x07	; 7
 1b0:	30 93 0c 01 	sts	0x010C, r19	; 0x80010c <speed_set+0x1>
 1b4:	20 93 0b 01 	sts	0x010B, r18	; 0x80010b <speed_set>
 1b8:	12 c0       	rjmp	.+36     	; 0x1de <getPattern+0x7a>
	}
	
	if(speed == 0x02)  //2
 1ba:	82 30       	cpi	r24, 0x02	; 2
 1bc:	39 f4       	brne	.+14     	; 0x1cc <getPattern+0x68>
	{
		speed_set = 1000;
 1be:	28 ee       	ldi	r18, 0xE8	; 232
 1c0:	33 e0       	ldi	r19, 0x03	; 3
 1c2:	30 93 0c 01 	sts	0x010C, r19	; 0x80010c <speed_set+0x1>
 1c6:	20 93 0b 01 	sts	0x010B, r18	; 0x80010b <speed_set>
 1ca:	12 c0       	rjmp	.+36     	; 0x1f0 <getPattern+0x8c>
	}
	
	if(speed == 0x03)  //3
 1cc:	83 30       	cpi	r24, 0x03	; 3
 1ce:	39 f4       	brne	.+14     	; 0x1de <getPattern+0x7a>
	{
		speed_set = 500;
 1d0:	24 ef       	ldi	r18, 0xF4	; 244
 1d2:	31 e0       	ldi	r19, 0x01	; 1
 1d4:	30 93 0c 01 	sts	0x010C, r19	; 0x80010c <speed_set+0x1>
 1d8:	20 93 0b 01 	sts	0x010B, r18	; 0x80010b <speed_set>
 1dc:	12 c0       	rjmp	.+36     	; 0x202 <getPattern+0x9e>
	}
	
	if(speed == 0x04)  //4
 1de:	84 30       	cpi	r24, 0x04	; 4
 1e0:	39 f4       	brne	.+14     	; 0x1f0 <getPattern+0x8c>
	{
		speed_set = 250;
 1e2:	8a ef       	ldi	r24, 0xFA	; 250
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <speed_set+0x1>
 1ea:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <speed_set>
 1ee:	08 95       	ret
	}
	
	if(speed == 0x05)  //5
 1f0:	85 30       	cpi	r24, 0x05	; 5
 1f2:	39 f4       	brne	.+14     	; 0x202 <getPattern+0x9e>
	{
		speed_set = 100;
 1f4:	84 e6       	ldi	r24, 0x64	; 100
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <speed_set+0x1>
 1fc:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <speed_set>
 200:	08 95       	ret
	}
	
	if(speed == 0x06)  //6
 202:	86 30       	cpi	r24, 0x06	; 6
 204:	31 f4       	brne	.+12     	; 0x212 <getPattern+0xae>
	{
		speed_set = 50;
 206:	82 e3       	ldi	r24, 0x32	; 50
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <speed_set+0x1>
 20e:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <speed_set>
 212:	08 95       	ret

00000214 <main>:
	
}
int main(void)
{
	
		DDRA = 0xFF;	PORTA = 0x00;
 214:	8f ef       	ldi	r24, 0xFF	; 255
 216:	81 b9       	out	0x01, r24	; 1
 218:	12 b8       	out	0x02, r1	; 2
		DDRB = 0x00;	PORTB = 0xFF;
 21a:	14 b8       	out	0x04, r1	; 4
 21c:	85 b9       	out	0x05, r24	; 5
		
		TimerOn();
 21e:	54 df       	rcall	.-344    	; 0xc8 <TimerOn>
		
		SPI_ServantInit();
 220:	76 df       	rcall	.-276    	; 0x10e <SPI_ServantInit>
		
	
    /* Replace with your application code */
    while (1) 
    {
		getPattern();
 222:	a0 df       	rcall	.-192    	; 0x164 <getPattern>
		TimerSet(speed_set);
 224:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <speed_set>
 228:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <speed_set+0x1>
 22c:	a0 e0       	ldi	r26, 0x00	; 0
 22e:	b0 e0       	ldi	r27, 0x00	; 0
	}
}

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 230:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 234:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 238:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 23c:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 240:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 244:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 248:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 24c:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
    /* Replace with your application code */
    while (1) 
    {
		getPattern();
		TimerSet(speed_set);
		if(pattern == 0xF0)
 250:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <pattern>
 254:	80 3f       	cpi	r24, 0xF0	; 240
 256:	11 f4       	brne	.+4      	; 0x25c <main+0x48>
		{
			SMP1();
 258:	60 df       	rcall	.-320    	; 0x11a <SMP1>
 25a:	e3 cf       	rjmp	.-58     	; 0x222 <main+0xe>
		}
		else if(pattern == 0xAA)
 25c:	8a 3a       	cpi	r24, 0xAA	; 170
 25e:	09 f7       	brne	.-62     	; 0x222 <main+0xe>
		{
			SMP2();
 260:	6f df       	rcall	.-290    	; 0x140 <SMP2>
 262:	df cf       	rjmp	.-66     	; 0x222 <main+0xe>

00000264 <_exit>:
 264:	f8 94       	cli

00000266 <__stop_program>:
 266:	ff cf       	rjmp	.-2      	; 0x266 <__stop_program>
