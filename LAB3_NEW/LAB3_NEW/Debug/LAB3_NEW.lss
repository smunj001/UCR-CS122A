
LAB3_NEW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000216  000002aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000216  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800104  00800104  000002ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a8d  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000910  00000000  00000000  00000e1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ec  00000000  00000000  0000172d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e4  00000000  00000000  00001b1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004be  00000000  00000000  00001c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000be  00000000  00000000  000020be  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  0000217c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	6c c0       	rjmp	.+216    	; 0x10e <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e1       	ldi	r30, 0x16	; 22
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 30       	cpi	r26, 0x0B	; 11
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	82 d0       	rcall	.+260    	; 0x1c8 <main>
  c4:	a6 c0       	rjmp	.+332    	; 0x212 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerOn>:
}

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
	_avr_timer_cntcurr = _avr_timer_M;
  c8:	8b e0       	ldi	r24, 0x0B	; 11
  ca:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  ce:	8d e7       	ldi	r24, 0x7D	; 125
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  d6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
  e0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  e4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  ec:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  f0:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
  f4:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
  f8:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_avr_timer_cntcurr>
  fc:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <_avr_timer_cntcurr+0x1>
 100:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <_avr_timer_cntcurr+0x2>
 104:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <_avr_timer_cntcurr+0x3>
 108:	80 e8       	ldi	r24, 0x80	; 128
 10a:	8f bf       	out	0x3f, r24	; 63
 10c:	08 95       	ret

0000010e <__vector_13>:
 10e:	1f 92       	push	r1
 110:	0f 92       	push	r0
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	0f 92       	push	r0
 116:	11 24       	eor	r1, r1
 118:	8f 93       	push	r24
 11a:	9f 93       	push	r25
 11c:	af 93       	push	r26
 11e:	bf 93       	push	r27
 120:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_avr_timer_cntcurr>
 124:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <_avr_timer_cntcurr+0x1>
 128:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <_avr_timer_cntcurr+0x2>
 12c:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <_avr_timer_cntcurr+0x3>
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	a1 09       	sbc	r26, r1
 134:	b1 09       	sbc	r27, r1
 136:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_avr_timer_cntcurr>
 13a:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <_avr_timer_cntcurr+0x1>
 13e:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <_avr_timer_cntcurr+0x2>
 142:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <_avr_timer_cntcurr+0x3>
 146:	89 2b       	or	r24, r25
 148:	8a 2b       	or	r24, r26
 14a:	8b 2b       	or	r24, r27
 14c:	99 f4       	brne	.+38     	; 0x174 <__vector_13+0x66>
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <TimerFlag>
 154:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 158:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 15c:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 160:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 164:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_avr_timer_cntcurr>
 168:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <_avr_timer_cntcurr+0x1>
 16c:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <_avr_timer_cntcurr+0x2>
 170:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <_avr_timer_cntcurr+0x3>
 174:	bf 91       	pop	r27
 176:	af 91       	pop	r26
 178:	9f 91       	pop	r25
 17a:	8f 91       	pop	r24
 17c:	0f 90       	pop	r0
 17e:	0f be       	out	0x3f, r0	; 63
 180:	0f 90       	pop	r0
 182:	1f 90       	pop	r1
 184:	18 95       	reti

00000186 <SPI_MasterInit>:


void SPI_MasterInit(void) {
	// set DDRB to have MISO line as output and MOSI, SCK, and SS as input
	
	DDRB = 0x40; PORTB = 0x40;
 186:	80 e4       	ldi	r24, 0x40	; 64
 188:	84 b9       	out	0x04, r24	; 4
 18a:	85 b9       	out	0x05, r24	; 5
	// set SPCR register to enable SPI and enable SPI interrupt (pg. 168)
	
	//SPCR = SPCR|0xC0;
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0);
 18c:	81 e5       	ldi	r24, 0x51	; 81
 18e:	8c bd       	out	0x2c, r24	; 44
	
	// make sure global interrupts are enabled on SREG register (pg. 9)
	
	SREG = 0x80;
 190:	80 e8       	ldi	r24, 0x80	; 128
 192:	8f bf       	out	0x3f, r24	; 63
 194:	08 95       	ret

00000196 <SPI_MasterTransmit>:
}

void SPI_MasterTransmit(unsigned char cData)
{
	/* Start transmission */
	SPDR = cData;
 196:	8e bd       	out	0x2e, r24	; 46
	PORTB = SetBit(PORTB, 4, 0);
 198:	2c 98       	cbi	0x05, 4	; 5
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)))
 19a:	0d b4       	in	r0, 0x2d	; 45
 19c:	07 fe       	sbrs	r0, 7
 19e:	fd cf       	rjmp	.-6      	; 0x19a <SPI_MasterTransmit+0x4>
	;
	
	PORTB = SetBit(PORTB, 4, 1);
 1a0:	2c 9a       	sbi	0x05, 4	; 5
 1a2:	08 95       	ret

000001a4 <TickFct_master>:
		case master_transmit:
		break;
		
	}
	
	switch(ms)
 1a4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <ms>
 1a8:	81 11       	cpse	r24, r1
 1aa:	0d c0       	rjmp	.+26     	; 0x1c6 <TickFct_master+0x22>
	{
		case master_transmit:
		
		SPI_MasterTransmit(currVal);
 1ac:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 1b0:	f2 df       	rcall	.-28     	; 0x196 <SPI_MasterTransmit>
		currVal++;
 1b2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 1b6:	8f 5f       	subi	r24, 0xFF	; 255
 1b8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>

		if(currVal == 0xFF)
 1bc:	8f 3f       	cpi	r24, 0xFF	; 255
 1be:	19 f4       	brne	.+6      	; 0x1c6 <TickFct_master+0x22>
		{
			SPI_MasterTransmit(0xFF);
 1c0:	ea df       	rcall	.-44     	; 0x196 <SPI_MasterTransmit>
			currVal = 0x00;
 1c2:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
 1c6:	08 95       	ret

000001c8 <main>:
}

int main(void)
{
	
	DDRA = 0xFF; PORTA = 0x00;
 1c8:	8f ef       	ldi	r24, 0xFF	; 255
 1ca:	81 b9       	out	0x01, r24	; 1
 1cc:	12 b8       	out	0x02, r1	; 2
	DDRB = 0xBF; PORTB = 0x40;
 1ce:	9f eb       	ldi	r25, 0xBF	; 191
 1d0:	94 b9       	out	0x04, r25	; 4
 1d2:	90 e4       	ldi	r25, 0x40	; 64
 1d4:	95 b9       	out	0x05, r25	; 5
	DDRC = 0xF0; PORTC = 0x0F;
 1d6:	90 ef       	ldi	r25, 0xF0	; 240
 1d8:	97 b9       	out	0x07, r25	; 7
 1da:	9f e0       	ldi	r25, 0x0F	; 15
 1dc:	98 b9       	out	0x08, r25	; 8
	DDRD = 0xFF; PORTD = 0x00;
 1de:	8a b9       	out	0x0a, r24	; 10
 1e0:	1b b8       	out	0x0b, r1	; 11
	}
}

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 1e2:	82 e3       	ldi	r24, 0x32	; 50
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	a0 e0       	ldi	r26, 0x00	; 0
 1e8:	b0 e0       	ldi	r27, 0x00	; 0
 1ea:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 1ee:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 1f2:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 1f6:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 1fa:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_avr_timer_cntcurr>
 1fe:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <_avr_timer_cntcurr+0x1>
 202:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <_avr_timer_cntcurr+0x2>
 206:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <_avr_timer_cntcurr+0x3>
	DDRB = 0xBF; PORTB = 0x40;
	DDRC = 0xF0; PORTC = 0x0F;
	DDRD = 0xFF; PORTD = 0x00;
	
	TimerSet(50);
	TimerOn();
 20a:	5e df       	rcall	.-324    	; 0xc8 <TimerOn>
	
	while(1)
	{
		
		SPI_MasterInit();
 20c:	bc df       	rcall	.-136    	; 0x186 <SPI_MasterInit>
		TickFct_master();
 20e:	ca df       	rcall	.-108    	; 0x1a4 <TickFct_master>
	}
 210:	fd cf       	rjmp	.-6      	; 0x20c <main+0x44>

00000212 <_exit>:
 212:	f8 94       	cli

00000214 <__stop_program>:
 214:	ff cf       	rjmp	.-2      	; 0x214 <__stop_program>
